"use strict";(self.webpackChunkcddl_codegen_documentation=self.webpackChunkcddl_codegen_documentation||[]).push([[591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),s=l(n),u=o,k=s["".concat(p,".").concat(u)]||s[u]||c[u]||i;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[s]="string"==typeof e?e:o,r[1]=m;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>m,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:3},r="Command line flags",m={unversionedId:"command_line_flags",id:"command_line_flags",title:"Command line flags",description:"Specifies the input CDDL file(s).",source:"@site/docs/command_line_flags.mdx",sourceDirName:".",slug:"/command_line_flags",permalink:"/cddl-codegen/command_line_flags",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation & Getting Started",permalink:"/cddl-codegen/getting_started"},next:{title:"Current capacities",permalink:"/cddl-codegen/current_capacities"}},p={},l=[],d={toc:l},s="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"command-line-flags"},"Command line flags"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--input")),(0,o.kt)("p",{parentName:"admonition"},"Specifies the input CDDL file(s)."),(0,o.kt)("p",{parentName:"admonition"},"For a single file:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input examples/test.cddl --output export\n")),(0,o.kt)("p",{parentName:"admonition"},"If a directory is specified e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"--input=some_dir")," then it will read all files in this directory (non-recursively).\nThe output format changes here. If there's a ",(0,o.kt)("inlineCode",{parentName:"p"},"lib.cddl")," the types contained there are the standard ",(0,o.kt)("a",{parentName:"p",href:"/cddl-codegen/output_format"},"output")," , and any other file e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"foo.cddl")," will have its own module ",(0,o.kt)("inlineCode",{parentName:"p"},"foo/mod.rs")," with its own ",(0,o.kt)("inlineCode",{parentName:"p"},"foo/serialization.rs"),", etc."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input examples --output export\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--output")),(0,o.kt)("p",{parentName:"admonition"},"Specifies the output directory."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input examples --output export\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--lib-name")),(0,o.kt)("p",{parentName:"admonition"},"Specify the rust crate name for the output library. The wasm crate will have ",(0,o.kt)("inlineCode",{parentName:"p"},"-wasm")," appended."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --lib-name some-crate-name\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--to-from-bytes-methods")),(0,o.kt)("p",{parentName:"admonition"},"Generates ",(0,o.kt)("inlineCode",{parentName:"p"},"to_cbor_bytes()")," / ",(0,o.kt)("inlineCode",{parentName:"p"},"from_cbor_bytes()")," methods on all WASM objects. On by default."),(0,o.kt)("p",{parentName:"admonition"},"(The rust code doesn't need this as you can directly use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Serialize"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"Deserialize")," traits on them.)  "),(0,o.kt)("p",{parentName:"admonition"},"Possible values: true, false"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --to-from-bytes-methods true\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--wasm")),(0,o.kt)("p",{parentName:"admonition"},"Whether to output a wasm crate. On by default.  "),(0,o.kt)("p",{parentName:"admonition"},"Possible values: true, false"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --wasm false\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--preserve-encodings")," "),(0,o.kt)("p",{parentName:"admonition"},"Preserves CBOR encoding upon deserialization e.g. definite vs indefinite, map ordering. For each module this will also create a ",(0,o.kt)("inlineCode",{parentName:"p"},"cbor_encodings.rs")," file to potentially store any structs for storing these encodings. This option is useful if you need to preserve the deserialized format for round-tripping (e.g. hashes) or if you want to modify the format to conincide with a specific tool for hashing."),(0,o.kt)("p",{parentName:"admonition"},"Possible values: true, false"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --preserve-encodings true\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--canonical-form")," "),(0,o.kt)("p",{parentName:"admonition"},"Used primarily with ",(0,o.kt)("inlineCode",{parentName:"p"},"--preserve-encodings")," to provide a way to override the specific deserialization format and to instead output canonical CBOR. This will have ",(0,o.kt)("inlineCode",{parentName:"p"},"Serialize"),"'s trait have an extra ",(0,o.kt)("inlineCode",{parentName:"p"},"to_canonical_cbor_bytes()")," method. Likewise the wasm wrappers (with ",(0,o.kt)("inlineCode",{parentName:"p"},"--to-from-bytes-methods"),") will contain one too."),(0,o.kt)("p",{parentName:"admonition"},"Possible values: true, false"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --canonical-form true\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--json-serde-derives")," "),(0,o.kt)("p",{parentName:"admonition"},"Derives serde::Serialize/serde::Deserialize for types to allow to/from JSON"),(0,o.kt)("p",{parentName:"admonition"},"Possible values: true, false"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --json-serde-derives true\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--json-schema-export")),(0,o.kt)("p",{parentName:"admonition"},"Tags types with sonSchema derives and generates a crate (in wasm/json-gen) to export them. This requires ",(0,o.kt)("inlineCode",{parentName:"p"},"--json-serde-derives"),"."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Possible values:"),"  true, false",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"Default:")," true"),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --json-schema-export true\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--package-json")),(0,o.kt)("p",{parentName:"admonition"},"Generates a npm package.json along with build scripts (some of these scripts require ",(0,o.kt)("inlineCode",{parentName:"p"},"--json-serde-derives"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"--json-schema-export")," to work)."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Possible values:")," true, false",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"Default:")," false"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --package-json true --json-schema-export true\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--common-import-override")),(0,o.kt)("p",{parentName:"admonition"},"Overrides the location of the static exports (e.g. error.rs, serialization.rs, etc)."),(0,o.kt)("p",{parentName:"admonition"},"This is particularily useful for combining multiple crates each generated using cddl-codegen where they all share a shared core directory where the static files are located."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Default:")," crate"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --common-import-override=cml_core\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--wasm-cbor-json-api-macro")),(0,o.kt)("p",{parentName:"admonition"},"If it is passed in, it will call the supplied externally defined macro on each exported type, instead of manually exporting the functions for to/from CBOR bytes + to/from JSON API."),(0,o.kt)("p",{parentName:"admonition"},"The external macro is assumed to exist at the specified path and will be imported if there are module prefixes."),(0,o.kt)("p",{parentName:"admonition"},"The macro must take the wasm wrapper type as the only parameter."),(0,o.kt)("p",{parentName:"admonition"},"This macro will be called regardless of the values of to-from-bytes-methods / json-serde-derives / etc, so it is assumed that whatever logic your macros have is consistent with the other CLI flag values."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --wasm-cbor-json-api-macro=cml_core_wasm::impl_wasm_cbor_json_api\n"))),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"--wasm-conversion-macro")),(0,o.kt)("p",{parentName:"admonition"},"If it is passed in, it will call the supplied externally defined macro on each exported type, instead of manually exporting the rust/wasm conversion traits."),(0,o.kt)("p",{parentName:"admonition"},"The external macro is assumed to exist at the specified path and will be imported if there are module prefixes."),(0,o.kt)("p",{parentName:"admonition"},"The macro must take the rust type as the first parameter and the wasm wrapper type as the second one."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cddl-codegen --input=example --output=export --wasm-conversion-macro=cml_core_wasm::impl_wasm_conversions\n"))))}c.isMDXComponent=!0}}]);