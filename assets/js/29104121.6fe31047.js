"use strict";(self.webpackChunkcddl_codegen_documentation=self.webpackChunkcddl_codegen_documentation||[]).push([[263],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),_=i,h=p["".concat(d,".").concat(_)]||p[_]||m[_]||a;return n?r.createElement(h,o(o({ref:t},s),{},{components:n})):r.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=_;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},5162:(e,t,n)=>{n(7294)},5488:(e,t,n)=>{n(7294),n(2389)},7712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));n(5488),n(5162);const a={sidebar_position:7},o="Integration with other cddl-codegen libraries",l={unversionedId:"integration-other",id:"integration-other",title:"Integration with other cddl-codegen libraries",description:"This guide is written in general for integrating with other libraries generated by cddl-codegen, but in particular references CML (cardano-multiplatform-lib) for examples. Most things referencing CML will be relevant to other common cddl-codegen generated libraries used as dependencies.",source:"@site/docs/integration-other.mdx",sourceDirName:".",slug:"/integration-other",permalink:"/cddl-codegen/integration-other",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/cddl-codegen/examples"}},d={},c=[{value:"Common cddl-codegen traits",id:"common-cddl-codegen-traits",level:2},{value:"CML macros",id:"cml-macros",level:2},{value:"Externally defined types",id:"externally-defined-types",level:2},{value:"<code>_CDDL_CODEGEN_EXTERN_TYPE_</code> vs <code>_CDDL_CODEGEN_RAW_BYTES_TYPE_</code>",id:"_cddl_codegen_extern_type_-vs-_cddl_codegen_raw_bytes_type_",level:3},{value:"Import pathing",id:"import-pathing",level:3},{value:"Non-black-box types",id:"non-black-box-types",level:3}],s={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integration-with-other-cddl-codegen-libraries"},"Integration with other cddl-codegen libraries"),(0,i.kt)("p",null,"This guide is written in general for integrating with other libraries generated by cddl-codegen, but in particular references CML (cardano-multiplatform-lib) for examples. Most things referencing CML will be relevant to other common cddl-codegen generated libraries used as dependencies."),(0,i.kt)("h2",{id:"common-cddl-codegen-traits"},"Common cddl-codegen traits"),(0,i.kt)("p",null,"When generating a library that has as a dependency another cddl-codegen-generated library you can share the common cddl-codegen types/traits like ",(0,i.kt)("inlineCode",{parentName:"p"},"Deserialize"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"RawBytesEncoding"),", etc. Remember to pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"--common-import-override")," tag. For CML we pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"--common-import-override=cml_core"),". This is where all the common cddl-codegen traits are located so we can avoid having duplicate incompatible traits in other libraries."),(0,i.kt)("h2",{id:"cml-macros"},"CML macros"),(0,i.kt)("p",null,"In CML we have macros for implementing WASM conversions and JSON/bytes. We pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"--wasm-cbor-json-api-macro=cml_core_wasm::impl_wasm_cbor_json_api")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--wasm-conversions-macro=cml_core_wasm::impl_wasm_conversions")," which are both located in ",(0,i.kt)("inlineCode",{parentName:"p"},"cml_core_wasm"),". This drastically reduces WASM wrapper boilerplate."),(0,i.kt)("h2",{id:"externally-defined-types"},"Externally defined types"),(0,i.kt)("h3",{id:"_cddl_codegen_extern_type_-vs-_cddl_codegen_raw_bytes_type_"},(0,i.kt)("inlineCode",{parentName:"h3"},"_CDDL_CODEGEN_EXTERN_TYPE_")," vs ",(0,i.kt)("inlineCode",{parentName:"h3"},"_CDDL_CODEGEN_RAW_BYTES_TYPE_")),(0,i.kt)("p",null,"There are two ways to have explicitly externally-defined types in cddl-codegen: ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_EXTERN_TYPE_")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_RAW_BYTES_TYPE_"),". It is important to choose the appropriate one. If the type was defined originally as ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_RAW_BYTES_TYPE_")," in CML (or whatever library) then it is important to define it using this so it will be encoded correctly. If the type was either defined using ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_EXTERN_TYPE_")," (hand-written) or was explicitly defined normally in the dependency lib (e.g. CML) then use ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_EXTERN_TYPE_"),"."),(0,i.kt)("h3",{id:"import-pathing"},"Import pathing"),(0,i.kt)("p",null,"If your input directory includes a ",(0,i.kt)("inlineCode",{parentName:"p"},"/_CDDL_CODEGEN_EXTERN_DEPS_DIR_/")," directory, everything inside will be treated as an external dependency. This allows users to specify the import tree of any dependency CDDL structures.\nYou can define these types as ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_EXTERN_TYPE_")," if it is entirely self-contained or ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_RAW_BYTES_TYPE_")," if it is CBOR bytes. For an example see the ",(0,i.kt)("inlineCode",{parentName:"p"},"_CDDL_CODEGEN_EXTERN_DEPS_DIR_")," directory inside of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dcSpark/cardano-multiplatform-lib/tree/develop/specs/multiera"},(0,i.kt)("inlineCode",{parentName:"a"},"specs/multiera")),". Each folder within the directory will be treated as a separate dependency. Nothing will be generated by any definitions inside this folder. You will still need to specify the dependency inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file afterwards."),(0,i.kt)("h3",{id:"non-black-box-types"},"Non-black-box types"),(0,i.kt)("p",null,"Another important detail, demonstrated in the above ",(0,i.kt)("inlineCode",{parentName:"p"},"multiera")," CDDL spec, is that when using external types that aren't 100% self-contained (i.e. can't be treated as a black box that implements ",(0,i.kt)("inlineCode",{parentName:"p"},"Serialize")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"Deserialize"),", nor as CBOR bytes implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"RawBytesEncoding"),") like ",(0,i.kt)("inlineCode",{parentName:"p"},"uint")," aliases should be explicitly defined and then removed afterwards. Use the above directory/pathing tip."))}m.isMDXComponent=!0}}]);