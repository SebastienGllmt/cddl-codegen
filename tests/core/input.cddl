hash = bytes .size (0..8)

foo = [uint, text, bytes]

tagged_text = #6.42(text)

opt_text = tagged_text / null

foo2 = #6.23([uint, opt_text])

bar = {
	foo: #6.1337(foo),
	? derp: uint,
	1 : uint / null, ; @name one
	? 5: text,
	five: 5,
	float: float64,
}

plain = (d: #6.23(uint), e: tagged_text)
outer = [a: uint, b: plain, c: "some text"] ; @used_as_key
plain_arrays = [
    embedded: plain,
    single: [plain],
    multi: [*plain],
]

table = { * uint => text }
table_arr_members = {
	tab: { * text => text },
	arr: [*uint],
	arr2: [*foo],
}

c_enum = 3 / 1 / 4

type_choice = 0 / "hello world" / uint / text / bytes / #6.64([*uint]) ; @used_as_key

non_overlapping_type_choice_all = uint / nint / text / bytes / #6.30("hello world") / [* uint] / { *text => uint }

non_overlapping_type_choice_some = uint / nint / text

enums = [
	c_enum,
	type_choice,
]

group_choice = [ foo // 0, x: uint // plain ] ; @used_as_key

foo_bytes = bytes .cbor foo

; since we don't generate code for definitions like the above (should we if no one refers to it?)
cbor_in_cbor = [foo_bytes, uint_bytes: bytes .cbor uint, tagged_foo_bytes]

tagged_foo_bytes = #6.20(bytes .cbor foo)

u8 = uint .size 1
u16 = uint .le 65535
u32 = 0..4294967295
u64 = uint .size 8 ; 8 bytes
i8 = -128 .. 127
i64 = int .size 8 ; 8 bytes

signed_ints = [
	u_8: 0 .. 255,
	u_16: uint .size 2,
	u_32: uint .size 4,
	u_64: uint .le 18446744073709551615,
	i_8: int .size 1,
	i_16: int .size 2,
	i_32: -2147483648 .. 2147483647,
	i_64: int .size 8,
	n_64: nint,
	u64_max: 18446744073709551615,
	; this test assumes i64::BITS == isize::BITS (i.e. 64-bit programs) or else the cddl parsing lib would mess up
	; if this test fails on your platform we might need to either remove this part
	; or make a fix for the cddl library.
	; The fix would be ideal as even though the true min in CBOR would be -u64::MAX
	; we can't test that since isize::BITS is never > 64 in any normal system and likely never will be
	i64_min: -9223372036854775808,
]

default_uint = uint .default 1337

map_with_defaults = {
	? 1 : default_uint
	? 2 : text .default "two"
}

paren_size = uint .size (1)
paren_cbor = bytes .cbor (text)

no_alias_u32 = 0..4294967295 ; @no_alias
no_alias_u64 = uint .size 8 ; @no_alias

no_alias = [
	no_alias_u32,
	no_alias_u64
]

external_foo = _CDDL_CODEGEN_EXTERN_TYPE_

externs = {
    req: external_foo,
  ? opt: external_foo,
}

extern_generic = _CDDL_CODEGEN_EXTERN_TYPE_

using_extern_generic = [
  foo: extern_generic<external_foo>,
]

; types below test codegen_table_type

standalone_table = { * uint => text }
standalone_text = { * text => text }

embedded_table = { * uint => text }
embedded_text = { * text => text }

table_array_wrapper = [embedded_table]
table_map_wrapper = { 721: embedded_table }

text_array_wrapper = [embedded_text]
text_map_wrapper = { 721: embedded_text }

inline_wrapper = [{ * text => text }]

top_level_array = [* uint]
top_level_single_elem = [uint]

overlapping_inlined = [
	; @name one
	0 //
	; @name two
	0, uint //
	; @name three
	0, uint, text
]

overlapping0 = [0]
overlapping1 = [0, uint]
overlapping2 = [0, uint, text]

overlapping = overlapping0 ; @name A
            / overlapping1 ; @name B
            / overlapping2 ; @name C

array_opt_fields = [
  ? x: 1.010101 
  ? a: uint,
  ? b: text,
	c: nint,
  ? d: text,
    y: 3.14159265
  ? e: non_overlapping_type_choice_some
  ? z: 2.71828
]

bounds = [
    w: -1000 .. 1000
    x: uint .le 7,
    y: nint .ge -5,
    z: text .size (3..14),
    a: [* uint] .size (1..3),
    b: { * uint => uint } .le 3
]

bounds_type_choice = bytes .size (0..64)
                   / text .size (0..64)

bounds_group_choice = [
    ; @name a
    a: uint, b: text .le 4 //
    ; @name b
    hash //
    ; @name c
    1, x: hash, y: hash
]

enum_opt_embed_fields = [
  ; @name ea
  1 //
  ; @name eb
  1, ?text, 5 //
  ; @name ec
  1, uint, 7 //
; doesn't parse but would result in triple nesting so worth testing if we can ever parse it
;  1, ? (text / null), #6.9(9)
  ; @name ed
  1, uint, ?text //
  ; @name ee
  1, uint, ?bytes, uint //
  ; @name ef
  1, ? non_overlapping_type_choice_some, #6.11(11) //
  ; @name eg
  1, ? overlapping_inlined, #6.13(13)
]

custom_bytes = bytes ; @custom_serialize custom_serialize_bytes @custom_deserialize custom_deserialize_bytes

struct_with_custom_serialization = [
  custom_bytes,
  field: bytes, ; @custom_serialize custom_serialize_bytes @custom_deserialize custom_deserialize_bytes
  overridden: custom_bytes, ; @custom_serialize write_hex_string @custom_deserialize read_hex_string
  tagged1: #6.9(custom_bytes),
  tagged2: #6.9(uint), ; @custom_serialize write_tagged_uint_str @custom_deserialize read_tagged_uint_str 
]
