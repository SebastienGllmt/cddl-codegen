hash = bytes .size (0..8)

foo = [uint, text, bytes]

tagged_text = #6.42(text)

opt_text = tagged_text / null

foo2 = #6.23([uint, opt_text])

bar = {
	foo: #6.1337(foo),
	? derp: uint,
	1 : uint / null,
	? 5: text,
	five: 5,
	float: float64,
}

plain = (d: #6.23(uint), e: tagged_text)
outer = [a: uint, b: plain, c: "some text"]
plain_arrays = [
; this is not supported right now. When single-element arrays are supported remove this.
;	single: [plain],
	multi: [*plain],
]

table = { * uint => text }
table_arr_members = {
	tab: { * text => text },
	arr: [*uint],
	arr2: [*foo],
}

c_enum = 3 / 1 / 4

type_choice = 0 / "hello world" / uint / text / bytes / #6.64([*uint])

enums = [
	c_enum,
	type_choice,
]

group_choice = [ foo // 0, x: uint // plain ]

foo_bytes = bytes .cbor foo

; since we don't generate code for definitions like the above (should we if no one refers to it?)
cbor_in_cbor = [foo_bytes, uint_bytes: bytes .cbor uint, tagged_foo_bytes]

tagged_foo_bytes = #6.20(bytes .cbor foo)

u8 = uint .size 1
u16 = uint .le 65535
u32 = 0..4294967295
u64 = uint .size 8 ; 8 bytes
i8 = -128 .. 127
i64 = int .size 8 ; 8 bytes

signed_ints = [
	u_8: 0 .. 255,
	u_16: uint .size 2,
	u_32: uint .size 4,
	u_64: uint .le 18446744073709551615,
	i_8: int .size 1,
	i_16: int .size 2,
	i_32: -2147483648 .. 2147483647,
	i_64: int .size 8,
	n_64: nint,
	u64_max: 18446744073709551615,
	; this test assumes i64::BITS == isize::BITS (i.e. 64-bit programs) or else the cddl parsing lib would mess up
	; if this test fails on your platform we might need to either remove this part
	; or make a fix for the cddl library.
	; The fix would be ideal as even though the true min in CBOR would be -u64::MAX
	; we can't test that since isize::BITS is never > 64 in any normal system and likely never will be
	i64_min: -9223372036854775808,
]

default_uint = uint .default 1337

map_with_defaults = {
	? 1 : default_uint
	? 2 : text .default "two"
}

paren_size = uint .size (1)
paren_cbor = bytes .cbor (text)

no_alias_u32 = 0..4294967295 ; @no_alias
no_alias_u64 = uint .size 8 ; @no_alias

no_alias = [
	no_alias_u32,
	no_alias_u64
]

external_foo = _CDDL_CODEGEN_EXTERN_TYPE_

externs = [
	external_foo
]

; types below test codegen_table_type

standalone_table = { * uint => text }
standalone_text = { * text => text }

embedded_table = { * uint => text }
embedded_text = { * text => text }

table_array_wrapper = [embedded_table]
table_map_wrapper = { 721: embedded_table }

text_array_wrapper = [embedded_text]
text_map_wrapper = { 721: embedded_text }

inline_wrapper = [{ * text => text }]

top_level_array = [* uint]
top_level_single_elem = [uint]