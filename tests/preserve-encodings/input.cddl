foo = #6.11([uint, text, bytes])

bar = {
	foo: #6.13(foo),
	? derp: uint,
	1 : uint / null,
	? 5: text,
	five: 5,
}

table = { * uint => text }

u32 = uint .size 4 ; 4 bytes

table_arr_members = {
	arr: [*u32],
	arr2: [*foo],
	table: table,
}

data = { * #6.14(bytes) => { * uint => { * #6.9(uint) => [* #6.18([* text]) ] } } }

deeply_nested = [ data: data ]

string64 = text .size (0..64)

tagged_text = #6.9(text)

string_16_32 = #6.7(text .size (16..32))

type_choice = 0 / "hello world" / uint / text / #6.16([*uint])

plain = (d: #6.13(uint), e: tagged_text)

group_choice = [ 3 // #6.10(2) // foo // 0, x: uint // plain ]

foo_bytes = bytes .cbor foo

; since we don't generate code for definitions like the above (should we if no one refers to it?)
cbor_in_cbor = [foo_bytes, uint_bytes: bytes .cbor uint]
