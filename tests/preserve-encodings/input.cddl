foo = #6.11([uint, text, bytes])

bar = {
	foo: #6.13(foo),
	? derp: uint,
	1 : uint / null,
	? 5: text,
	five: 5,
}

table = { * uint => text }

u32 = uint .size 4 ; 4 bytes

table_arr_members = {
	arr: [*u32],
	arr2: [*foo],
	table: table,
}

data = { * #6.14(bytes) => { * uint => { * #6.9(uint) => [* #6.18([* text]) ] } } }

deeply_nested = [ data: data ]

string64 = text .size (0..64)

tagged_text = #6.9(text)

string_16_32 = #6.7(text .size (16..32))

type_choice = 0 / "hello world" / uint / text / #6.16([*uint])

plain = (d: #6.13(uint), e: tagged_text)

group_choice = [ 3 // #6.10(2) // foo // 0, x: uint // plain ]

foo_bytes = bytes .cbor foo

; since we don't generate code for definitions like the above (should we if no one refers to it?)
cbor_in_cbor = [foo_bytes, uint_bytes: bytes .cbor uint]

signed_ints = [
	u_8: uint .size 1,
	u_16: uint .size 2,
	u_32: uint .size 4,
	u_64: uint .size 8,
	i_8: int .size 1,
	i_16: int .size 2,
	i_32: int .size 4,
	i_64: int .size 8,
	n_64: nint
	u64_max: 18446744073709551615,
	; this test assumes i64::BITS == isize::BITS or else the cddl parsing lib would mess up
	; if this test fails on your platform we might need to either remove this part
	; or make a fix for the cddl library.
	; The fix would be ideal as even though the true min in CBOR would be -u64::MAX
	; we can't support since isize::BITS is never > 64 in any normal system and likely never will be
	i64_min: -9223372036854775808
]