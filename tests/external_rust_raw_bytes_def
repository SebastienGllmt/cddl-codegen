pub trait RawBytesEncoding {
    fn to_raw_bytes(&self) -> &[u8];

    fn from_raw_bytes(bytes: &[u8]) -> Result<Self, CryptoError>
    where
        Self: Sized;
}

#[derive(Debug)]
pub enum CryptoError {
    WrongSize,
}

impl std::fmt::Display for CryptoError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CryptoError::WrongSize")
    }
}

impl std::error::Error for CryptoError {}

#[derive(Clone, Debug)]
pub struct PubKey([u8; 32]);

impl RawBytesEncoding for PubKey {
    fn to_raw_bytes(&self) -> &[u8] {
        &self.0
    }

    fn from_raw_bytes(bytes: &[u8]) -> Result<Self, CryptoError> {
        use std::convert::TryInto;
        bytes.try_into().map(PubKey).or(Err(CryptoError::WrongSize))
    }
}
