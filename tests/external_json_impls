impl serde::Serialize for CustomWrapper {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(&u64::from(self.clone()).to_string())
    }
}

impl<'de> serde::de::Deserialize<'de> for CustomWrapper {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        use alloc::str::FromStr;
        let s = <String as serde::de::Deserialize>::deserialize(deserializer)?;
        u64::from_str(&s)
            .map(CustomWrapper::new)
            .map_err(|_e| {
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&s),
                    &"invalid u64 as string",
                )
            })
    }
}

impl schemars::JsonSchema for CustomWrapper {
    fn schema_name() -> String {
        String::from("CustomWrapper")
    }

    fn json_schema(gen: &mut schemars::gen::SchemaGenerator) -> schemars::schema::Schema {
        String::json_schema(gen)
    }

    fn is_referenceable() -> bool {
        String::is_referenceable()
    }
}