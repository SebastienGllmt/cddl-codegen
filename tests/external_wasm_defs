#[derive(Clone, Debug)]
#[wasm_bindgen]
pub struct ExternalFoo(cddl_lib::ExternalFoo);

#[wasm_bindgen]
impl ExternalFoo {
    pub fn to_cbor_bytes(&self) -> Vec<u8> {
        cddl_lib::serialization::ToCBORBytes::to_cbor_bytes(&self.0)
    }

    pub fn from_cbor_bytes(cbor_bytes: &[u8]) -> Result<ExternalFoo, JsError> {
        cddl_lib::serialization::Deserialize::from_cbor_bytes(cbor_bytes)
            .map(Self)
            .map_err(Into::into)
    }

    pub fn index_0(&self) -> u64 {
        self.0.index_0
    }

    pub fn index_1(&self) -> String {
        self.0.index_1.clone()
    }

    pub fn index_2(&self) -> Vec<u8> {
        self.0.index_2.clone()
    }

    pub fn new(index_0: u64, index_1: String, index_2: Vec<u8>) -> Self {
        Self(cddl_lib::ExternalFoo::new(index_0, index_1, index_2))
    }
}

impl From<cddl_lib::ExternalFoo> for ExternalFoo {
    fn from(native: cddl_lib::ExternalFoo) -> Self {
        Self(native)
    }
}

impl From<ExternalFoo> for cddl_lib::ExternalFoo {
    fn from(wasm: ExternalFoo) -> Self {
        wasm.0
    }
}

impl AsRef<cddl_lib::ExternalFoo> for ExternalFoo {
    fn as_ref(&self) -> &cddl_lib::ExternalFoo {
        &self.0
    }
}

type ExternGenericFoo = Foo;

impl From<cddl_lib::ExternGeneric<cddl_lib::Foo>> for Foo {
    fn from(native: cddl_lib::ExternGeneric<cddl_lib::Foo>) -> Self {
        native.0.into()
    }
}

impl From<Foo> for cddl_lib::ExternGeneric<cddl_lib::Foo> {
    fn from(wasm: Foo) -> Self {
        cddl_lib::ExternGeneric::new(wasm.0)
    }
}
