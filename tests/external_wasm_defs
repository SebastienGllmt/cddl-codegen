#[derive(Clone, Debug)]
#[wasm_bindgen]
pub struct ExternalFoo(core::ExternalFoo);

#[wasm_bindgen]
impl ExternalFoo {
    pub fn to_cbor_bytes(&self) -> Vec<u8> {
        core::serialization::ToCBORBytes::to_cbor_bytes(&self.0)
    }

    pub fn from_cbor_bytes(cbor_bytes: &[u8]) -> Result<ExternalFoo, JsValue> {
        core::serialization::Deserialize::from_cbor_bytes(cbor_bytes)
            .map(Self)
            .map_err(|e| JsValue::from_str(&format!("from_bytes: {}", e)))
    }

    pub fn index_0(&self) -> u64 {
        self.0.index_0
    }

    pub fn index_1(&self) -> String {
        self.0.index_1.clone()
    }

    pub fn index_2(&self) -> Vec<u8> {
        self.0.index_2.clone()
    }

    pub fn new(index_0: u64, index_1: String, index_2: Vec<u8>) -> Self {
        Self(core::ExternalFoo::new(index_0, index_1, index_2))
    }
}

impl From<core::ExternalFoo> for ExternalFoo {
    fn from(native: core::ExternalFoo) -> Self {
        Self(native)
    }
}

impl From<ExternalFoo> for core::ExternalFoo {
    fn from(wasm: ExternalFoo) -> Self {
        wasm.0
    }
}

impl AsRef<core::ExternalFoo> for ExternalFoo {
    fn as_ref(&self) -> &core::ExternalFoo {
        &self.0
    }
}
