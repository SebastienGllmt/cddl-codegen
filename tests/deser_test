static NULL: u8 = 0xf6;
static BREAK: u8 = 0xff;
static ARR_INDEF: u8 = 0x9f;
static MAP_INDEF: u8 = 0xbf;

fn arr_def(len: u8) -> Vec<u8> {
    assert!(len <= 0x17);
    vec![0x80u8 + len]
}

fn map_def(len: u8) -> Vec<u8> {
    assert!(len <= 0x17);
    vec![0xa0 + len]
}

fn arr_sz(len: u64, sz: cbor_event::Sz) -> Vec<u8> {
    let mut buf = cbor_event::se::Serializer::new_vec();
    buf.write_array_sz(cbor_event::LenSz::Len(len, sz)).unwrap();
    buf.finalize()
}

fn map_sz(len: u64, sz: cbor_event::Sz) -> Vec<u8> {
    let mut buf = cbor_event::se::Serializer::new_vec();
    buf.write_map_sz(cbor_event::LenSz::Len(len, sz)).unwrap();
    buf.finalize()
}

fn cbor_string(s: &str) -> Vec<u8> {
    // our keys are short so we don't handle bigger ones
    assert!(s.len() <= 0x17);
    let mut bytes = Vec::with_capacity(s.len() + 1);
    bytes.push(0x60u8 + s.len() as u8);
    bytes.extend_from_slice(s.as_bytes());
    bytes
}

fn cbor_tag(t: u8) -> Vec<u8> {
    assert!(t <= 0xd4 - 0xc0);
    vec![0xc0u8 + t]
}

fn cbor_int(x: i128, sz: cbor_event::Sz) -> Vec<u8> {
    let mut buf = cbor_event::se::Serializer::new_vec();
    if x >= 0 {
        buf.write_unsigned_integer_sz(x as u64, sz).unwrap();
    } else {
        buf.write_negative_integer_sz(x, sz).unwrap();
    }
    buf.finalize()
}

fn cbor_tag_sz(tag: u64, sz: cbor_event::Sz) -> Vec<u8> {
    let mut buf = cbor_event::se::Serializer::new_vec();
    buf.write_tag_sz(tag, sz).unwrap();
    buf.finalize()
}

fn cbor_str_sz(s: &str, sz: cbor_event::StringLenSz) -> Vec<u8> {
    let mut buf = cbor_event::se::Serializer::new_vec();
    buf.write_text_sz(s, sz).unwrap();
    buf.finalize()
}

fn cbor_bytes_sz(bytes: Vec<u8>, sz: cbor_event::StringLenSz) -> Vec<u8> {
    let mut buf = cbor_event::se::Serializer::new_vec();
    buf.write_bytes_sz(bytes, sz).unwrap();
    buf.finalize()
}

fn print_cbor_types(obj_name: &str, vec: &Vec<u8>) {
    use cbor_event::Type;
    let mut raw = cbor_event::de::Deserializer::from(std::io::Cursor::new(vec));
    let mut lens = Vec::new();
    let consume_elem = |lens: &mut Vec<cbor_event::LenSz>| {
        if let Some(len) = lens.last_mut() {
            if let cbor_event::LenSz::Len(n, _) = len {
                *n -= 1;
            }
        }
    };
    let reduce_depth = |lens: &mut Vec<cbor_event::LenSz>| {
        while let Some(cbor_event::LenSz::Len(0, _)) = lens.last() {
            lens.pop();
            println!("{}}}", "\t".repeat(lens.len()));
        }
    };
    println!("{} = {{", obj_name);
    loop {
        print!("{}", "\t".repeat(lens.len()));
        match raw.cbor_type() {
            Err(_) => break,
            Ok(Type::UnsignedInteger) => {
                let (x, sz) = raw.unsigned_integer_sz().unwrap();
                println!("UINT({}, {:?})", x, sz);
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::NegativeInteger) => {
                let (x, sz) = raw.negative_integer_sz().unwrap();
                println!("NINT({}, {:?})", x, sz);
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::Bytes) => {
                let (x, sz) = raw.bytes_sz().unwrap();
                println!("BYTES({:?}, {:?})", x, sz);
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::Text) => {
                let (x, sz) = raw.text_sz().unwrap();
                println!("TEXT(\"{}\", {:?})", x, sz);
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::Array) => {
                let len = raw.array_sz().unwrap();
                println!("ARRAY({:?}) {{", len);
                consume_elem(&mut lens);
                lens.push(len);
                if let cbor_event::LenSz::Len(0, _sz) = len {
                    reduce_depth(&mut lens);
                }
            },
            Ok(Type::Map) => {
                let len = raw.map_sz().unwrap();
                println!("MAP({:?}) {{", len);
                consume_elem(&mut lens);
                lens.push(match len {
                    cbor_event::LenSz::Len(n, sz) => cbor_event::LenSz::Len(2 * n, sz),
                    cbor_event::LenSz::Indefinite => cbor_event::LenSz::Indefinite,
                });
                if let cbor_event::LenSz::Len(0, _sz) = len {
                    reduce_depth(&mut lens);
                }
            },
            Ok(Type::Tag) => {
                let (tag, sz) = raw.tag_sz().unwrap();
                println!("TAG({}, {:?})", tag, sz);
            },
            Ok(Type::Special) => {
                let special = raw.special().unwrap();
                println!("SPECIAL({:?})", special);
                if special == cbor_event::Special::Break {
                    if let Some(cbor_event::LenSz::Indefinite) = lens.last() {
                        lens.pop();
                        reduce_depth(&mut lens);
                    } else {
                        panic!("unexpected break");
                    }
                } else {
                    consume_elem(&mut lens);
                    reduce_depth(&mut lens);
                }
            },
        }
    }
    println!("}}");
}
